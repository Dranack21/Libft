Historique de chat


ChatGPT
Nouveau chat
Aujourd’hui
Memory Allocation Correction

Splitting Logic Improvements
Memmove Correction: Overlapping Logic
Memmove: Overlap Handling
Hier
Additionner heures et minutes
New chat
New chat
New chat
New chat
New chat
New chat
New chat
Nouveau chat
Corrections: itoa Function
7 jours précédents
Strlcat et ft_strtrim
Memchr Fonksiyonunun Düzeltilmesi
Réclamation paiement 100€
Strnstr function correction
Validated Exercises - No Copy
Listar arquivos C recursivamente
Visualizar arquivo - aprimoramentos
Make Target Not Found
Fix Git Email Configuration
Auto Delete goinfre contents
Trimming Whitespace from Strings
Nouveau chat
Makefile pour compilation C.
Fclean Target in Makefile
Passer au plan supérieur
Profitez de GPT-4, DALL·E et bien plus encore
ChatGPT


User
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_split.c                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: habouda <marvin@42.fr>                     +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/05/22 12:21:44 by habouda           #+#    #+#             */
/*   Updated: 2024/05/22 14:28:33 by habouda          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

int	char_pos(const char *str, char c)
{
	int	i;

	i = 0;
	while (str[i] && str[i] != c)
	{
		i++;
	}
	return (i);
}


int	count_words(const char *str, char c)
{
	int	i;
	int	words;
	int	j;

	i = 0;
	words = 0;
	j = 0;
	if (!str)
		return (0);
	if (!c)
		return (1);
	while (str[i])
	{
		if (str[i] != c && j == 0)
		{
			words++;
			j = 1;
		}
		else
			j = 0;
		i++;
	}
	return (words);
}

void allocation(char **split, const char *s, int n)
{
    int i = 0;
    while (i < n)
    {
        split[i] = ft_strdup(s); // Use strdup to copy the string up to the delimiter
        i++;
        s += ft_strlen(split[i - 1]) + 1; // Move to the start of the next word
    }
}


char	**ft_split(char const *s, char c)
{
	char	**split;
	int		i;
	int		j;

	j = 0;
	i = 0;
	split = malloc(sizeof(char) * count_words(s,c) + 1);
	if (!split)
		return (NULL);
	while(*s)
	{
		i = char_pos (s, c);
		split[j] = malloc(sizeof(char) * i + 1);
		if (!split[j])
			return (NULL);
		allocation(&split[j], s, i);
		s = s + i + 1;
		j++;
	}
	return (split);
}



Expected (cat -e test02.output):
lorem$
ipsum$
dolor$
sit$
amet,$
consectetur$
adipiscing$
elit.$
Sed$
non$
risus.$
Suspendisse$

Your result (cat -e user_output_test02):
lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed non risus. Suspendisse$
ipsum dolor sit amet, consectetur adipiscing elit. Sed non risus. Suspendisse$
dolor sit amet, consectetur adipiscing elit. Sed non risus. Suspendisse$
sit amet, consectetur adipiscing elit. Sed non risus. Suspendisse$
amet, consectetur adipiscing elit. Sed non risus. Suspendisse$

it seems like I copy too much why
ChatGPT
The issue in your code arises from the way you are managing the memory allocation and string copying in the allocation function. The allocation function is incorrectly using ft_strdup and ft_strlen, leading to overlapping segments and incorrect copying.

Here is a corrected version of your code:

allocation function should be removed since it is not necessary.
Memory allocation and copying should be handled directly in ft_split.
Here's the revised ft_split implementation:

c
Copier le code
#include "libft.h"

int	char_pos(const char *str, char c)
{
	int	i;

	i = 0;
	while (str[i] && str[i] != c)
	{
		i++;
	}
	return (i);
}

int	count_words(const char *str, char c)
{
	int	i;
	int	words;
	int	in_word;

	i = 0;
	words = 0;
	in_word = 0;
	if (!str)
		return (0);
	while (str[i])
	{
		if (str[i] != c && !in_word)
		{
			words++;
			in_word = 1;
		}
		else if (str[i] == c)
		{
			in_word = 0;
		}
		i++;
	}
	return (words);
}

char	**ft_split(char const *s, char c)
{
	char	**split;
	int		i;
	int		j;
	int		word_len;

	j = 0;
	split = (char **)malloc(sizeof(char *) * (count_words(s, c) + 1));
	if (!split)
		return (NULL);
	while (*s)
	{
		while (*s && *s == c)
			s++;
		if (*s && *s != c)
		{
			word_len = char_pos(s, c);
			split[j] = (char *)malloc(sizeof(char) * (word_len + 1));
			if (!split[j])
				return (NULL); // Consider freeing previously allocated memory in case of failure
			ft_strlcpy(split[j], s, word_len + 1);
			s += word_len;
			j++;
		}
	}
	split[j] = NULL;
	return (split);
}
Explanation of Changes:
char_pos Function: This function remains unchanged and correctly determines the length of a word up to the delimiter.

count_words Function: Improved the loop logic to correctly count the words in the string.

ft_split Function:

Allocated memory for the split array with count_words(s, c) + 1 to include the NULL pointer at the end.
Added a loop to skip consecutive delimiters.
Allocated memory for each word and copied the word using ft_strlcpy instead of using an unnecessary allocation function.
Properly handled the movement through the input string and ensured correct word copying.
This revised code should work correctly to split the input string s into words separated by the delimiter c. Each word will be stored in the split array, which ends with a NULL pointer.







Responses will use GPT-3.5 until your limit resets après 16:06.

Obtenir ChatGPT Plus



Message ChatGPT

ChatGPT peut faire des erreurs. Envisagez de vérifier les informations importantes.
?
ChatGPT
